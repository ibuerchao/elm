server:
  servlet:
    context-path: /api
  port: 8080

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/elm_sys?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: root
    druid:
      maxActive: 300
      initialSize: 50
      minIdle: 50
      testOnBorrow: false
      testWhileIdle: true
      validation-query: select 1
  redis:
    host: localhost
    port: 6379
    jedis:
      pool:
        max-active: 8
        min-idle: 1
        max-idle: 8
        max-wait: 10000
  mail:
    host: smtp.126.com
    username: buerchao@126.com
    password: WNWJOZCZNVATCFTP
    port: 25
    protocol: smtp
    default-encoding: utf-8
  thymeleaf:
    cache: false # 开发时关闭缓存,不然没法看到实时页面
    mode: HTML # 用非严格的 HTML
    encoding: UTF-8
  transaction:
    default-timeout: 10
  #    servlet:
#      content-type: text/html
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      consumer:
        # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
        auto-commit-interval: 1S
        # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
        # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
        # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
        auto-offset-reset: earliest
        # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
        enable-auto-commit: false
        # 键的反序列化方式
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        # 值的反序列化方式
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      listener:
        # 在侦听器容器中运行的线程数。
        concurrency: 5
        #listner负责ack，每调用一次，就立即commit
        ack-mode: manual_immediate
        missing-topics-fatal: false

mybatis:
#  mapper-locations: classpath*:com/buerc/**/*.xml
  configuration:
    map-underscore-to-camel-case: true

#日志级别
logging:
  level:
    org:
      springframework:
        web: INFO
#spring.mvc.throw-exception-if-no-handler-found=true
#spring.resources.add-mappings=false

#jwt token配置
jwt:
  secret: buerc-elm
  expiration: 7200
  tokenHead: Bearer
  refreshTime: 30
rsa:
  publicKey: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCRkNokhMqpFS6QOzGIgXeI4/QXw7dGnUNHuvNinl2d2r80LmYSTYUq7qGYSmKaFMBNd/wbSVvxPLEqdxFUukIKuCtFQxO4ZhYq6+eyHCbJgZn8/uxMg6tb5xGUmV4dQX1mf7dLV1jF3+1Wi/DB/csW5TcMVeCpFeJktLNb+S/tMwIDAQAB
  privateKey: MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJGQ2iSEyqkVLpA7MYiBd4jj9BfDt0adQ0e682KeXZ3avzQuZhJNhSruoZhKYpoUwE13/BtJW/E8sSp3EVS6Qgq4K0VDE7hmFirr57IcJsmBmfz+7EyDq1vnEZSZXh1BfWZ/t0tXWMXf7VaL8MH9yxblNwxV4KkV4mS0s1v5L+0zAgMBAAECgYAjcLTrtzjwOawAiajhp0PHHFjNgGUa2CcNS8L9+7inOh7bQYCwbBdEAJ1vSoz/HpZDRjcnHZE5BqHLyPl7O23gdsl96OLROXMVw0ZJXqTJsX215eFnnGJqvWiAMllh6xHsHcbjffsl1Xhupu7XZAqDgaWNOBbnjVENedWqgqf9QQJBAOYp0XB/ysieaLrIgUpMdrSWvL5aYahgzxfA2HMNTmCQ5hivT5gytus1Bk+mA4oHPKWbC5nXNXKDfZJkMHdKP6kCQQCh5/aTew7ar+z1sZEiOzl6jjPv2N9njGi+1Y32B5QV76jGOItsgtxPjrmfnPsd7jddsPFOSwu7nqZE+nOSiv97AkAQJeLx16VsieCjKioYAmFZrjGz0TeEzrX43qjQ+aAEGmZqWPJmpTg8LE4zDFy3NGbG36fitTykuiD3Qlw8IlNxAkBOBZifzaeE306Tv/QuyNeUJb8FkD9oiRNZE1SMAW7te0ab71fQ/ObqN99f+ahR7iAkOEaw8h0/Vt7NUtwq/GzNAkBW+SmlEtAelASJzMn6L+Y4Vi9gMW5EOJNrlGOaZ1eeOVYPCLMKUvvtHehloIKkhPoB68DAAUvTKP5wHILnfW+a
app:
  url:
    permission: http://127.0.0.1:${server.port}${server.servlet.context-path}
redis:
  message:
    topic: web-sys